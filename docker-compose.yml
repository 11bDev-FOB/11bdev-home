services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: eleven_b_dev:latest
    container_name: eleven_b_dev_app
    restart: unless-stopped
    environment:
      - RAILS_ENV=production
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - RAILS_SERVE_STATIC_FILES=true
      - RAILS_LOG_TO_STDOUT=true
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-changeme}
    volumes:
      # SQLite database persistence
      - app_db:/rails/db
      # Active Storage files
      - app_storage:/rails/storage
      # Application logs
      - app_logs:/rails/log
      # Temp files
      - app_tmp:/rails/tmp
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  caddy:
    image: caddy:2-alpine
    container_name: eleven_b_dev_caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  app_db:
    driver: local
  app_storage:
    driver: local
  app_logs:
    driver: local
  app_tmp:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  app_network:
    driver: bridge
